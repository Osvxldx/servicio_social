"""
Sistema de Gesti√≥n de Pago de Agua - Versi√≥n Corregida
Aplicaci√≥n Principal con Manejo Mejorado de Errores
"""

import sys
import os
import traceback
from PyQt5.QtWidgets import QApplication, QMessageBox, QSplashScreen
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPixmap, QPainter, QFont

# Agregar el directorio ra√≠z al path para imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ui.login_window import LoginWindow
from ui.main_window import MainWindow
from database.database_manager import DatabaseManager

class WaterManagementApp:
    """Clase principal de la aplicaci√≥n con manejo mejorado de errores"""
    
    def __init__(self):
        self.app = QApplication(sys.argv)
        self.setup_application()
        self.main_window = None
        
    def setup_application(self):
        """Configura la aplicaci√≥n"""
        self.app.setApplicationName("Sistema de Gesti√≥n de Agua")
        self.app.setApplicationVersion("1.0.0")
        self.app.setOrganizationName("Gesti√≥n Municipal")
        self.app.setStyle('Fusion')
        
    def show_splash_screen(self):
        """Muestra la pantalla de carga"""
        try:
            splash_pixmap = QPixmap(400, 300)
            splash_pixmap.fill(Qt.blue)
            
            painter = QPainter(splash_pixmap)
            painter.setRenderHint(QPainter.Antialiasing)
            painter.setPen(Qt.white)
            font = QFont("Arial", 20, QFont.Bold)
            painter.setFont(font)
            painter.drawText(splash_pixmap.rect(), Qt.AlignCenter, 
                            "üíß\nSistema de Gesti√≥n\nde Agua\n\nCargando...")
            painter.end()
            
            splash = QSplashScreen(splash_pixmap)
            splash.show()
            self.app.processEvents()
            
            # Programar cierre del splash y mostrar login
            QTimer.singleShot(1500, splash.close)
            QTimer.singleShot(2000, self.show_login)
            
            return splash
            
        except Exception as e:
            print(f"Error en splash screen: {e}")
            # Si falla el splash, mostrar login directamente
            QTimer.singleShot(100, self.show_login)
            return None
    
    def show_login(self):
        """Muestra la ventana de login con manejo mejorado"""
        print("üîê Iniciando ventana de login...")
        
        try:
            # Crear ventana de login
            self.login_window = LoginWindow()
            
            # Conectar se√±al de login exitoso
            self.login_window.login_successful.connect(self.on_login_success)
            
            print("üîê Mostrando ventana de login...")
            result = self.login_window.exec_()
            
            print(f"üîê Resultado del login: {result}")
            
            if result != LoginWindow.Accepted:
                print("‚ùå Login cancelado o cerrado")
                self.app.quit()
                
        except Exception as e:
            print(f"‚ùå Error en login: {str(e)}")
            traceback.print_exc()
            QMessageBox.critical(None, "Error de Login", 
                               f"Error al inicializar el login:\n{str(e)}\n\nLa aplicaci√≥n se cerrar√°.")
            self.app.quit()
    
    def on_login_success(self):
        """Maneja el login exitoso"""
        print("‚úÖ Login exitoso! Iniciando ventana principal...")
        
        try:
            # Cerrar ventana de login
            if hasattr(self, 'login_window'):
                self.login_window.close()
            
            # Peque√±a pausa para asegurar que el login se cierre
            QTimer.singleShot(100, self.create_main_window)
            
        except Exception as e:
            print(f"‚ùå Error en on_login_success: {str(e)}")
            traceback.print_exc()
    
    def create_main_window(self):
        """Crea y muestra la ventana principal"""
        print("üñ•Ô∏è Creando ventana principal...")
        
        try:
            # Crear ventana principal
            self.main_window = MainWindow()
            
            print("üñ•Ô∏è Ventana principal creada, mostrando...")
            
            # Mostrar ventana
            self.main_window.show()
            
            # Centrar ventana
            self.center_window(self.main_window)
            
            # Traer al frente
            self.main_window.raise_()
            self.main_window.activateWindow()
            
            print("‚úÖ Ventana principal mostrada exitosamente!")
            
        except Exception as e:
            print(f"‚ùå Error al crear ventana principal: {str(e)}")
            traceback.print_exc()
            
            # Mostrar error detallado
            error_msg = f"""Error al inicializar la ventana principal:

{str(e)}

Detalles t√©cnicos:
{traceback.format_exc()}

Posibles soluciones:
1. Verificar que todas las dependencias est√©n instaladas
2. Ejecutar: pip install PyQt5 matplotlib
3. Verificar permisos de la carpeta del proyecto
"""
            
            QMessageBox.critical(None, "Error Cr√≠tico", error_msg)
            self.app.quit()
    
    def center_window(self, window):
        """Centra una ventana en la pantalla"""
        try:
            screen = self.app.primaryScreen().geometry()
            window_rect = window.geometry()
            
            x = (screen.width() - window_rect.width()) // 2
            y = (screen.height() - window_rect.height()) // 2
            
            window.move(x, y)
            
        except Exception as e:
            print(f"Error al centrar ventana: {e}")
    
    def verify_database(self):
        """Verifica que la base de datos est√© funcionando correctamente"""
        print("üìä Verificando base de datos...")
        
        try:
            db_manager = DatabaseManager()
            stats = db_manager.get_statistics()
            print(f"‚úÖ Base de datos verificada: {stats}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error de base de datos: {str(e)}")
            
            error_msg = f"""Error de Base de Datos:

{str(e)}

Soluciones:
1. Verificar que la carpeta 'database' existe
2. Verificar permisos de escritura en la carpeta
3. Ejecutar 'python test_database.py' para diagn√≥stico
"""
            
            QMessageBox.critical(None, "Error de Base de Datos", error_msg)
            return False
    
    def run(self):
        """Ejecuta la aplicaci√≥n"""
        print("üöÄ Iniciando Sistema de Gesti√≥n de Agua...")
        
        try:
            # 1. Verificar base de datos
            if not self.verify_database():
                print("‚ùå Error en base de datos, cerrando...")
                return 1
            
            # 2. Mostrar splash screen
            print("üé¨ Mostrando splash screen...")
            splash = self.show_splash_screen()
            
            # 3. Ejecutar aplicaci√≥n
            print("üéØ Ejecutando bucle principal...")
            return self.app.exec_()
            
        except Exception as e:
            print(f"‚ùå Error fatal en run(): {str(e)}")
            traceback.print_exc()
            
            QMessageBox.critical(None, "Error Fatal", 
                               f"Error fatal en la aplicaci√≥n:\n{str(e)}")
            return 1

def main():
    """Funci√≥n principal con manejo completo de errores"""
    print("=" * 60)
    print("üåä SISTEMA DE GESTI√ìN DE PAGO DE AGUA")
    print("=" * 60)
    
    try:
        # Verificar Python
        print(f"üêç Python version: {sys.version}")
        
        # Verificar PyQt5
        try:
            from PyQt5.QtCore import QT_VERSION_STR
            print(f"üñºÔ∏è PyQt5 version: {QT_VERSION_STR}")
        except ImportError:
            print("‚ùå PyQt5 no encontrado. Ejecute: pip install PyQt5")
            return 1
        
        # Crear y ejecutar aplicaci√≥n
        print("üöÄ Creando aplicaci√≥n...")
        app = WaterManagementApp()
        
        print("‚ñ∂Ô∏è Ejecutando aplicaci√≥n...")
        exit_code = app.run()
        
        print(f"üèÅ Aplicaci√≥n terminada con c√≥digo: {exit_code}")
        return exit_code
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Aplicaci√≥n interrumpida por el usuario")
        return 0
        
    except Exception as e:
        print(f"‚ùå Error fatal: {str(e)}")
        traceback.print_exc()
        
        try:
            QMessageBox.critical(None, "Error Fatal", 
                               f"Error fatal:\n{str(e)}\n\nConsulte la consola para m√°s detalles.")
        except:
            pass  # Si incluso el mensaje de error falla
        
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
